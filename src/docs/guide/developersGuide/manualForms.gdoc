*Why do we use Manual Forms*

Sometimes it’s not convenient to use Grailsflow automatic forms for process flow. They have a number of restrictions.

All automatic forms have the same layout: the list of variables and the list of available events. In Grailsflow, there
is a possibility to create manual or custom forms. On your manual form you can use any styles, scripts, functionality.
See example.

Automatic form for HolidayRequest process definitions:

!developersGuide/manualForms_1.jpg!

Custom form for the same process definition:

!developersGuide/manualForms_2.jpg!

*Based on Grails: Groovy + GSPs*

The manual form creation if based on Groovy and GSP concepts - The manual (or custom) form is a GSP template that will
be rendered on the ‘Node Details’ page. When you decide that you need to create a form, the following links about
Grails, Groovy and GSP (groovy server pages) can be useful for you:

 * [http://www.grails.org/|http://www.grails.org/]

 * [http://groovy.codehaus.org/|http://groovy.codehaus.org/]

 * [http://groovy.codehaus.org/GSP|http://groovy.codehaus.org/GSP]


*How to create Manual Forms and integrate into Process definition*

When you decide that you need a manual instead of an automatic form for your node, there are two ways to do it:

*  Create simple Manual form;
*  Create Manual form with Custom Controller

The information for the second (Create Manual form with Custom Controller) option  can be found in chapter 11. This
feature works only in development mode.

When you finish with the form and press the ‘Generate’ button, the GSP template is generated and stored in the
application views. When the node is activated, the manual form will be rendered to the user. Each form belongs to the
process node and stored in views as - path‘views/manualForms/<ProcessType>/_<ProcessNode>.gsp’.
The Manual form is rendered as the part of the 'Node Details' page. Only server messages (standard error messages) can
be added to the page automatically (at the top of the page). If your form cannot be rendered, the error message will be
displayed.


*Access of Process Variables*

On the manual form you can access all process variables. They are in bean ‘nodeDetails’ that is available on the manual
form. You can get them by using the following signature:

${nodeDetails.variables}

Where 'variables' is a Map that contains entries
[ variableName: variableDetails ]
VariableDetails bean contains the following list of properties:

*    *name*           String variable name
*    *typeName*  (changed to *type* since version 1.0)   type of variable
*    *label*            Map of languageID -> variable label
*    *description*   Map of languageID -> variable description
*    *value*           Object variable value
*    *visibility*        Variable visibility
*    *required*      Is variable required or not
*    *view*             View of variable (See more information in chapter 8)

For example, you can access property 'value' of variable using the following notation:
${nodeDetails.variables.requesterName.value}

!developersGuide/manualForms_3.jpg!

If you want your variable to be updated after form submitting you need to follow the rule that variable should have
property 'name' specified like:

name="var_<variableName>".


*Available Events (transitions)*

Also on the manual forms you can get information about all available transitions from current node. They are stored in
bean ‘nodeDetails’ and can be accessed using signature:

${nodeDetails.events}

Where "events" is a set of objects. Each object contains the next information about transition:

*    event;
*    label (the Map of entries: languageID -> event label) - it is used for making events translatable.
    If you want to use transition on UI you need to take into account the following rule: your HTML submit component
    should have property ‘name’ specified like
    name = “event_<event>” .

See example:

!developersGuide/manualForms_4.jpg!

Pay attention, that if you want to submit any information to the server you need to place it in  <g:form> tag. For more
information check [http://www.grails.org/Tag+-+form|http://www.grails.org/Tag+-+form ].

*Available Beans and Services*

There is a bean "nodeDetails" that is available on manual form. This bean is of type
com.jcatalog.grailsflow.engine.NodeDetails and contains the following info:

NodeDetails has following properties:

*    process        Object contains information about process
*    nodeID         String node ID
*    label             Map of  languageID -> node label
*    description    Map of languageID -> node description
*    caller            String node caller
*    status            FlowStatus node status
*    startedOn      Date node startedOn
*    dueOn           Date node dueOn
*    assignees      Set<String>   of assignee IDs
*    events           Set<EventDetails> of events
*    variables        Map of variableName -> variableDetails


*How to access DB entries*

On the custom form it is possible to access database instances using standard Grails possibilities (working with
domains) and Groovy tags:
{code}
<g:select from="${com.jcatalog.core.Country.list()}"
          optionKey="countryId"
          optionValue="countryId"
          value="${orderAddress?.country}"/>
{code}

This example shows how to create selectbox with Countries (countryID are shown).

If you need to access the DB table, you need to specify the domain class (full class name) and then call one of the
dynamic methods that Grails provides for domains.

For example, you can get all entries from table Product:

{code}
com.jcatalog.product.Product.list()
{code}

or find products using some filters:
{code}
com.jcatalog.product.Product.findAllByProductIdLike(“%Printer%”)
 
com.jcatalog.product.Product.findWhere(productId:“Printer”, catalogId: “HP”)
{code}

For more information about available dynamic methods,  see  [http://grails.org/DomainClass+Dynamic+Methods|http://grails.org/DomainClass+Dynamic+Methods] .


*Custom tags provided by Grailsflow*

For the automatic form you can specify ‘view’ and default values for each process variable. For the manual form you can
use all the same ‘views’ or tags. Among them:

*    SimpleView
*    TextAreaView
*    SelectBoxView
*    CheckBoxView
*    DateView
*    LinkView
*    DocumentView
*    ListObjectsView
*    ExternalSearchObjectView
*    DefaultView

TThe 'view' property can be specified for each process variable in the variable editor. Then, if you specify the view,
you can ask Grailsflow to use this 'view' for rendering the variable. For this reason, you can use 'variableInput'
Grailsflow tag (implemented in developing version):

{code}
<gf:variableInput variable="${variable}"/>
{code}

If you do not specify 'view' templates for each process variable you can use view templates directly on the manual page:

{code}
<g:customizingTemplate
 template="${ com.jcatalog.grailsflow.model.view.CheckBoxView.template}”
 model="[variable: variable, view: variable.view, parameterName: parameterName]"/>
{code}

In the tag there are the following parameters:

*    template (that is the template that should be used for variable rendering);
*    model (the information that will be available on the template.)

The template requires ‘variable’ for rendering, ‘view’, and ‘parameterName’ – it provides to the server the name of the
variable for updating DB entries after submitting.)

Please see the example how to get ExternalSearchObjectView for variable.

You can use the following notations:
{code}
<gf:variableInput variable="${variable}"/>
{code}

Use this notation when variable 'view' and all necessary parameters for displaying external search (like displayKey,
URL for search) are specified in process script.
Also it's possible to get external search component using tag 'customizingTemplate':
{code}
<g:customizingTemplate
 template="${com.jcatalog.grailsflow.model.view.ExternalSearchObjectView.template}”
 model="[variable: variable, view: variable.view, parameterName: parameterName]"/>
{code}

In that case, all parameters that are necessary for ExternalSearchObjectView (e.g. displayKey, URL for external search)
will be taken from ‘variable.view’ object. But pay attention in that case you need to specify all these attributes for
the variable in Process Variable Editor.

!developersGuide/manualForms_5.jpg!

If you did not configure 'View' for the process variable definition, it is possible to use External search too. You can
do it using Grails <g:render> tag. For ExternalSearchObjectView there are three parameters that you can specify:

*    displayKey (property for display in input field);
*    searchUrl (is necessary, URL for external search page);
*    additionalFields (Additional fields for displaying, they are usually displayed as readonly fields.);

The following example should show external search component for Address object.
{code}
<g:render contextPath="${pluginContextPath}"
 template="/variableViewTempaltes/externalSearchObjectView"
 model="\[variable:nodeDetails.variables.address,
 view:new com.jcatalog.grailsflow.model.view.ExternalSearchObjectView(displayKey:'addressID',
 searchUrl: 'search/address.gsp',
 additionalFields: 'name1, city'),
 parameterName: 'externalSearchObjectView_address'\]"/>
{code}

Where:

*    contextPath      Path for template searching
*    template         Template for rendering
*    model            Information that should be available for the template

In the 'model' you put 'variable' object. As you do not have a view specified for the variable, we can create it:
{code}
new com.jcatalog.grailsflow.model.view.ExternalSearchObjectView(…)
{code}

In the brackets, it is possible to define properties for this 'view'.

{code}
new com.jcatalog.grailsflow.model.view.ExternalSearchObjectView(displayKey: 'addressID', searchUrl: 'search/address.gsp', additionalFields: 'name1, city')
{code}

As mentioned before, the events and variables have Maps of labels and descriptions (only variables have descriptions).
You can show the labels and descriptions according to the requested locale using Grailsflow tag 'translatedValue'’.

For example:
{code}
<g:translatedValue translations="${variable.label}" default="${variable.name}" />
{code}

or
{code}
<g:translatedValue translations="${variable.description}" default="" />
{code}

*How to include user owned GSP templates*

It is possible to include your own prepared templates into the manual form.You can do it using Grailsflow tag
“customizingTemplate”.
{code}
<g:customizingTemplate template="/myForms/eventForwarding" model="[currentAssignees: nodeDetails.assignees]"/>
{code}

*Customize Return Controller and Action*

By default, after the manual step form execution, you will be forwarded to the Process Details page. You can customize
this behavior by specifying the return controller and action in your manual page. For example you can set it to
'showWorklist' - this means that after form submission, you will be redirected to the Worklist page. Please see the
following example:

{code}
<input type="hidden" name="returnController" value="process"/ >
<input type="hidden" name="returnAction" value="showWorklist"/ >
{code}

Releases of Grailsflow-1.0 and higher use parameters 'resultController', 'resultAction' instead of 'returnController',
'returnAction'.

*Multi-Step pages*

This feature works only in the development mode of Grails. It makes it possible to enhance process flow (add some
additional functionality and steps) without changing process definition. This can be done by using multi-step page. For
this, you need to select ‘Use Custom Controller and Form’ in Node Editor. In that case your ‘manual form’ content
(entered in the textarea) will be rendered as the first step. It should contain links/buttons that leads to the actions
in your Custom Controller. Your Custom Controller can make some actions and then render the next ‘step page’ (page can
be created using the ‘Add Multi-Step Page’ link). This step can lead to the Custom Controller and the Controller will
render the next step or redirect to the Grailsflow controller and continue the flow.

Multi-Step page belongs to the node and stored in the views under path, see some screenshots:

!developersGuide/manualForms_6.jpg!

Add one more Step:

!developersGuide/manualForms_7.jpg!

Multi-Step page belongs to node and stored in the views under path: 

‘views/<ProcessType><ProcessNode>/<StepName>.gsp’,

Pay attention that the name for the controller is generated by Grailsflow and it has view:

<ProcessID_NodeID>Controller.groovy

In the example above you can see that the form has “controller = ‘test_SetValues’”. Where ‘Test’ – is a name of Process,
and ‘SetValues’ is a name of node for which you prepare the manual form.

Pay attention that manual (or custom) form is included  in GSP page as template. This template is included in

<g:form action="sendEvent" controller="process" ...>  tag, it means that you should not use more forms in your manual
page. If you need to submit other form action you can use JavaScript features to change form action and controller.
For example:
{code}
<input type="button" onclick=" this.form.action = ...; form.submit(); " />
{code}