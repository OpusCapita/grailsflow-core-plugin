h4. Support of Clustering

There are situations when it is necessary to have a kind of load balancer. For example, when the user
have several installation of Grailsflow on the one server or when we need to work in cluster mode.

Grailsflow plugin has a kind of load balancer. The idea is based on the following aspects: every automatically executed
node creates lock (entry in *GrailsflowLock* table) for process before execution. After node execution the lock is removed. Locks
are stored in *GrailsflowLock* table. Also there is a table *ClusterInfo*, it contains information about clusters. In Grailsflow s*- There is
a *ClusterCheckerJob* that fires according to configured values ( _grailsflow.scheduler.clusterChecker.repeatInterval_
value). The job updates *ClusterInfo* entry about the cluster in which it runs and then checks information about other
clusters - if they are expired, e.g. they didn't update *ClusterInfo* entry for more then
*(grailsflow.scheduler.clusterChecker.repeatInterval x 2)* time , then we assume that the cluster is not runnable. If the
cluster is desided to be stopped, we remove all its locks from *GrailsflowLock* and delete its *ClusterInfo* entry. Also the
*ClusterCheckerJob* checks the locks for expired time. If the locks are inactive more then
_grailsflow.clusterChecker.lockExpiredInterval_ time, it means that the process is not running or probably the node cannot
be executed or process is not responding. In that case the process should be killed and it lock is deleted.

Properties to configure:

 #  {code} grailsflow.clusterName = "Some_cluster_name" {code}

    By default, it is configured in plugin descriptor by the following way:

    {code} grailsflow.clusterName = "gfw_${new Date().time}_${new Random().nextInt(1000000)}"  {code}

 #  {code} grailsflow.clusterChecker.lockExpiredInterval = "2000000" {code}

    This is a long value, value interval when the locks are expired and should be deleted and processes are killed. The
    default value is *6000000* ms.

 #   Configuration for ClusterCheckerJob:
    {code}
    grailsflow.scheduler.clusterChecker.autoStart = false // by default its 'true'
    grailsflow.scheduler.clusterChecker.startDelay = 10000  // 30 sec by default
    grailsflow.scheduler.clusterChecker.repeatInterval = 50000 // 1 minute by default
    {code}




