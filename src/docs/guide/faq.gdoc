h3. 1. How to customize worklist page.

There are several ways to customize worklist page. If you need to enhance 
worklist table with more columns such as any process variable values, then 
you can configure additional columns using Spring 
('additionalWorklistColumns' bean): 

{code} 
  <bean id="additionalWorklistColumns" class="java.util.ArrayList">
    <constructor-arg>
      <list>
        <value>productId</value>
        <value>name</value>
        <value>requesterName</value>
      </list>
    </constructor-arg>
  </bean>
{code}


Also there is a filtering on worklist. It helps searching for process nodes 
with some known variables values.There is a very important note here!The 
filtering can slow down your worklist loading, if you have a lot of processes 
in the list. If there are more then 500 processes in the worklist we get 
variables by splitting the parameter list into smaller chunks and then 
combining the results. But such functionality requires time for execution and 
can slow down performance. So, by default, the filtering works well if there 
are no more entries than then maxRestrictedProcesses size. The behaviour can 
be changed by reconfiguring some available Spring beans or even to disable 
filtering functionality at all.

*isWorklistFilterAvailable* - this bean defines if we need the filtering 
functionality, the default value is configured to TRUE 

{code}
  isWorklistFilterAvailable(java.lang.Boolean, Boolean.TRUE)
{code}

*maxRestrictedProcesses* - this bean contains the Integer value for common 
quantity of restricted processes used in SQL 'in' clause (default value is 
'2000' entries)

{code}
  maxRestrictedProcesses(java.lang.Integer, "2000")
{code}

Another way to customize worklist is to use your custom page with the same 
name and path: 
 _views/process/showWorklist.gsp_


h3. 2. How to redirect to any custom page after sending event.

By default, usually after submitting manual form the user is redirected to 
'showProcessDetails' page. If you want to customize this behaviour, specify 
the following values on your custom gsp page: 

{code}
 <input type="hidden" name="resultController" value="someControllerHere"/ >
 <input type="hidden" name="resultAction" value="someActionHere"/ >
{code}


Also here yu can specify any additional values that should be submitted: 

{code}
<input type="hidden" name="userName" value="${someBean.userName}"/ >
{code}



h3. 3. How to create custom page with elements of standard generated form.

If you like to use automitic form generation and don't want to create any 
special new form for variable values, you can use grailsflow template for 
your custom page: 

{code}
   <gf:customizingTemplate template="/manualForms/variablesForm"
      model="[variables: nodeDetails.variables]" />
{code} 

If you want to have additional node Information on your custom page, use 
grailsflow template *nodeInfo*: 
 
{code}
    <gf:customizingTemplate template="/manualForms/nodeInfo"
       model="[nodeDetails: nodeDetails]"/>
{code} 
  
Also , if there is need to assign node to another user/role/group, it is 
possible to use: 
 
{code}
      <gf:customizingTemplate template="/manualForms/eventForwarding"
        model="[currentAssignees: nodeDetails.assignees]"/>
{code} 



h3. 4. If you don't want to have automatic starting for NodeActivatorJob and DueDateJob during application running

In that case there are properties that can be configured in your application (e.g. in Config.groovy):

{code}
 grailsflow.scheduler.nodeActivator.autoStart = false    // disable auto starting for Engine Job
 grailsflow.scheduler.nodeDueDate.autoStart = false    // disable auto starting for Engine Job
 grailsflow.scheduler.eventsEmailCheck.autoStart = false    // disabled by default
{code}

Also it is possible to specify start delay and repeat interval for Grailsflow jobs:

{code}
 grailsflow.scheduler.nodeActivator.startDelay = 60000         // starts in one minute after application startup
 grailsflow.scheduler.nodeActivator.repeatInterval = 15000     // executes every 15 seconds

 grailsflow.scheduler.nodeDueDate.startDelay = 60000
 grailsflow.scheduler.nodeDueDate.repeatInterval = 60000       // executes every minute

 grailsflow.scheduler.eventsEmailCheck.startDelay = 60000   // executes every minute
 grailsflow.scheduler.eventsEmailCheck.repeatInterval = 60000 // executes every minute
{code}

h3. 5. How to configure E-mail settings for Grailsflow-core

The user can specify mail settings in Config.groovy. There are the following settings:

{code}
grailsflow.events.mail.enabled=false
grailsflow.events.mail.address="somebody@mail.xxx"
grailsflow.events.mail.host="mail.xxx"
grailsflow.events.mail.account="smith"
grailsflow.events.mail.password="pass"
{code}

h3. 6. How to configure my custom i18n translations for Grailsflow

It is possible to specify additional i18n bundles locations for Grailsflow translations in Config.groovy

{code}
grailsflow.i18n.locations = ["WEB-INF/grails-app/i18n/"]
{code}