h4.  1. How to customize worklist page. 

There are several ways to customize the worklist page. To enhance the worklist table with more columns - such as any process variable values etc., then configure the additional columns using the Spring ('additionalWorklistColumns' bean) : 

{code} 
  <bean id="additionalWorklistColumns" class="java.util.ArrayList">
    <constructor-arg>
      <list>
        <value>productId</value>
        <value>name</value>
        <value>requesterName</value>
      </list>
    </constructor-arg>
  </bean>
{code}

Also, filtering is possible in the worklist. It helps in searching for process nodes with some known variable values.  

*Important*  - Filtering can slow down the loading of your worklist, if you have a lot of processes in the list.

If there are more then 500 processes in the worklist, get variables by splitting the parameter list into smaller sections and then combining the results. However, this requires time for execution and can slow down performance. So, by default, the filtering works well if there are no more entries than the maxRestrictedProcesses size. The behaviour can be changed by re-configuring some available Spring beans or even disabling the filtering functionality.

*isWorklistFilterAvailable* - if needed, this bean defines the filtering functionality and the default value is configured to TRUE 

{code}

  isWorklistFilterAvailable(java.lang.Boolean, Boolean.TRUE)

{code}

*maxRestrictedProcesses* - this bean contains the Integer value for common quantity of restricted processes used in the SQL 'in' clause (default value is '2000' entries)

{code}
  maxRestrictedProcesses(java.lang.Integer, "2000")
{code}

Another way to customize worklist is to use your custom page with the same 
name and path :  _views/process/showWorklist.gsp_

h4.  2. How to redirect to any custom page after sending an event.

Usually, after submitting the manual form, the user is redirected, by default, to the 'showProcessDetails' page. To customize this behaviour, specify the following values on your custom gsp page : 

{code}
 <input type="hidden" name="resultController" value="someControllerHere"/ >
 <input type="hidden" name="resultAction" value="someActionHere"/ >
{code}

Specify any additional values that should be submitted here : 

{code}
<input type="hidden" name="userName" value="${someBean.userName}"/ >
{code}

h4.  3. How to create a custom page with elements of a standard generated form

If you like to use automitic form generation and don't want to create any 
special new form for variable values, use the grailsflow template for the custom page : 

{code}
   <gf:customizingTemplate template="/manualForms/variablesForm"
      model="[variables: nodeDetails.variables]" />
{code} 

For additional node Information on your custom page, use grailsflow template *nodeInfo*: 
 
{code}
    <gf:customizingTemplate template="/manualForms/nodeInfo"
       model="[nodeDetails: nodeDetails]"/>
{code} 
  
To assign a node to another user/role/group, use :  
 
{code}
      <gf:customizingTemplate template="/manualForms/eventForwarding"
        model="[currentAssignees: nodeDetails.assignees]"/>
{code} 


h4.  4. If you don't want to have automatic starting for NodeActivatorJob and DueDateJob during application running

In that case there are properties that can be configured in your application (e.g. in Config.groovy):

{code}
 grailsflow.scheduler.nodeActivator.autoStart = false    // disable auto starting for Engine Job
 grailsflow.scheduler.nodeDueDate.autoStart = false    // disable auto starting for Engine Job
 grailsflow.scheduler.eventsEmailCheck.autoStart = false    // disabled by default
{code}

Also it is possible to specify start delay and repeat interval for Grailsflow jobs:

{code}
 grailsflow.scheduler.nodeActivator.startDelay = 60000         // starts in one minute after application startup

 grailsflow.scheduler.nodeActivator.repeatInterval = 15000     // executes every 15 seconds

 grailsflow.scheduler.nodeDueDate.startDelay = 60000
 grailsflow.scheduler.nodeDueDate.repeatInterval = 60000       // executes every minute

 grailsflow.scheduler.eventsEmailCheck.startDelay = 60000   // executes every minute

 grailsflow.scheduler.eventsEmailCheck.repeatInterval = 60000 // executes every minute

{code}

h4.  5.  How to configure E-mail settings for Grailsflow-core

The user can specify mail settings in Config.groovy. There are the following settings:

{code}
grailsflow.events.mail.enabled=false
grailsflow.events.mail.address="somebody@mail.xxx"
grailsflow.events.mail.host="mail.xxx"
grailsflow.events.mail.account="smith"
grailsflow.events.mail.password="pass"
{code}

h4.  6. How to configure my custom i18n translations for Grailsflow

It is possible to specify additional i18n bundles locations for Grailsflow translations in Config.groovy

{code}
grailsflow.i18n.locations = ["WEB-INF/grails-app/i18n/"]
{code}
