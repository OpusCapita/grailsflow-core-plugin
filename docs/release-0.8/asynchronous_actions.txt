Asynchronous Actions
------------------------

Implemented a AsynchronousAction abstract class. It implements Action interface but
contains some more important properties and works in a different way. The developer, who
develops Process Definition, or user who creates Process Definition using Process Editor
should know some restrictions for such types of actions:

 1. Asynchronous actions can be used only for return statements, it means that they are
always the last in the node 'action' section.

 2. Every node might have several asynchronous actions, but only one of them is allowed
to be executed.

 3. After such action, the node set to a state "AWAIT_CALLBACK" to denote, that we wait for
the result of an asychronous call and not be forwarded to the next step before a callback
from the asynchronous operation is received.

 4. The information returned by the action will be returned to process controller as the
result of 'return' statement.

In current implementation, the asynchronous action schedule a Quartz job with specified
parameters. Only jobs that extends abstract GrailsflowCallbackJob class can be scheduled
(and can be specified in developed asynchronous action class).
This abstract GrailsflowCallbackJob class knows how to prepare information after action
execution (in XML view) and how to return it back to process controller. 

AsynchronousAction abstract class contains 2 abstract methods that should be implemented
in all realizations of asynchronous actions:

 1. abstract Object execute()

The method can contain any implementation, but the result that is returned from it is used
as a result of node 'return' statement.

 2. abstract Class getScheduledJobClass()

The specified class should extends GrailsflowCallbackJob (abstract class, that knows how to
execute callback functions).